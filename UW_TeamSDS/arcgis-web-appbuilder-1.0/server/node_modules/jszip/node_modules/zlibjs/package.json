{
  "author": {
    "name": "Yuta Imaya"
  },
  "contributors": {
    "name": "Yuta Imaya",
    "email": "imaya.devel@gmail.com"
  },
  "name": "zlibjs",
  "description": "zlib, gzip and zip implementation in JavaScript",
  "version": "0.2.0",
  "main": "./bin/node-zlib.js",
  "homepage": "https://github.com/imaya/zlib.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/imaya/zlib.js.git"
  },
  "dependencies": {},
  "devDependencies": {
    "buster": ">=0.7.4"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "buster-test"
  },
  "readme": "zlib.js\n=======\n\n[![Build Status](https://travis-ci.org/imaya/zlib.js.png?branch=master)](https://travis-ci.org/imaya/zlib.js)\n\n[Japanese version](./README.md)\n\nzlib.js is ZLIB(RFC1950), DEFLATE(RFC1951), GZIP(RFC1952) and PKZIP implementation in JavaScript.\n\n\nUsage\n------\n\nUse one in \"bin\" directory.\n\n- zlib_and_gzip.min.js: ZLIB + GZIP\n    + (Raw)\n        * rawdeflate.js: Raw Deflate\n        * rawinflate.js: Raw Inflate\n    + zlib.min.js: ZLIB Inflate + Deflate\n        * inflate.min.js: ZLIB Inflate\n        * deflate.min.js: ZLIB Deflate\n        * inflate_stream.min.js: ZLIB Inflate (stream mode)\n    + (GZIP)\n        * gzip.min.js: GZIP\n        * gunzip.min.js: GUNZIP\n    + (PKZIP)\n        * zip.min.js ZIP\n        * unzip.min.js UNZIP\n- node-zlib.js: (ZLIB + GZIP for node.js)\n\n\n### Compression\n\n#### Raw Deflate\n\n```js\n// plain = Array.<number> or Uint8Array\nvar deflate = new Zlib.RawDeflate(plain);\nvar compressed = deflate.compress();\n```\n\n#### Raw Deflate Option\n\nSee ZLIB Option.\n\n#### ZLIB\n\n```js\n// plain = Array.<number> or Uint8Array\nvar deflate = new Zlib.Deflate(plain);\nvar compressed = deflate.compress();\n```\n\n##### ZLIB Option\n\nSecond argument of Zlib.Deflate constructor\n\n```js\n{\n    compressionType: Zlib.Deflate.CompressionType, // compression type\n    lazy: number // lazy matching parameter\n}\n```\n\n<code>Zlib.Deflate.CompressionType</code> is enumerable,\nChoose one in <code>NONE</code> (Store), <code>FIXED</code> (Fixed Huffman Coding), <code>DYNAMIC</code> (Dynamic Huffman Coding).\nDefault value is <code>DYNAMIC</code>.\n\n<code>lazy</code> is Lazy Matching length.\nThis parameter is deprecated.\n\n\n#### GZIP\n\nGZIP implementation is incomplete.\nHowever, there is no problem in usual use. \n\n```js\n// plain = Array.<number> or Uint8Array\nvar gzip = new Zlib.Gzip(plain);\nvar compressed = gzip.compress();\n```\n\n\n##### GZIP Option\n\n```js\n{\n    deflateOptions: Object, // see: deflate option (ZLIB Option)\n    flags: {\n        fname: boolean, // use filename?\n        comment: boolean, // use comment?\n        fhcrc: boolean // use file checksum?\n    },\n    filename: string, // filename\n    comment: string // comment\n}\n```\n\n\n#### PKZIP\n\n```js\nvar zip = new Zlib.Zip();\n// plainData1\nzip.addFile(plainData1, {\n    filename: stringToByteArray('foo.txt')\n});\nzip.addFile(plainData2, {\n    filename: stringToByteArray('bar.txt')\n});\nzip.addFile(plainData3, {\n    filename: stringToByteArray('baz.txt')\n});\nvar compressed = zip.compress();\n\nfunction stringToByteArray(str) {\n    var array = new (window.Uint8Array !== void 0 ? Uint8Array : Array)(str.length);\n    var i;\n    var il;\n\n    for (i = 0, il = str.length; i < il; ++i) {\n        array[i] = str.charCodeAt(i) & 0xff;\n    }\n\n    return array;\n}\n```\n\n##### PKZIP Option\n\nfilename, comment, extraField are must use Uint8Array if enabled Typed Array.\n\n```js\n{\n    filename: (Array.<number>|Uint8Array), // filename\n    comment: (Array.<number>|Uint8Array), //comment\n    extraField: (Array.<number>|Uint8Array), // extra field\n    compress: boolean, // compress when called \"addFile\" method.\n    compressionMethod: Zlib.Zip.CompressionMethod, // STORE or DEFLATE\n    os: Zlib.Zip.OperatingSystem, // MSDOS or UNIX or MACINTOSH\n    deflateOption: Object // see: ZLIB Option\n}\n```\n\n### Decompression\n\n#### Raw Deflate\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar inflate = new Zlib.RawInflate(compressed);\nvar plain = inflate.decompress();\n```\n\n#### Raw Deflate Option\n\nSee ZLIB Option.\n\n#### ZLIB\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar inflate = new Zlib.Inflate(compressed);\nvar plain = inflate.decompress();\n```\n\n##### ZLIB Option\n\nSecond argument of Zlib.Inflate constructor\n\n```js\n{\n    'index': number, // start position in input buffer \n    'bufferSize': number, // initial output buffer size\n    'bufferType': Zlib.Inflate.BufferType, // buffer expantion type\n    'resize': boolean, // resize buffer(ArrayBuffer) when end of decompression (default: false)\n    'verify': boolean  // verify decompression result (default: false)\n}\n```\n\n<code>Zlib.Inflate.BufferType</code> is enumerable.\nChoose one <code>ADAPTIVE</code>(default) and <code>BLOCK</code>.\n\n- <code>ADAPTIVE</code>: buffer expansion based on compression ratio in filled buffer.\n- <code>BLOCK</code>: buffer expansion based on <code>BufferSize</code>.\n\n\n#### GZIP\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar gunzip = new Zlib.Gunzip(compressed);\nvar plain = gunzip.decompress();\n```\n\n\n#### PKZIP\n\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar unzip = new Zlib.Unzip(compressed);\nvar filenames = unzip.getFilenames();\nvar plain = unzip.decompress(filenames[0]);\n```\n\n\n### Node.js\n\nsee unit tests.\n<https://github.com/imaya/zlib.js/blob/master/test/node-test.js>\n\n\n## Debug\n\nIf you want to know the code before compile, SourceMaps and PrettyPrint can be used.\n\n\n### SourceMaps\n\nIf you want to enable the SourceMaps if, you can use the `src` directory and *.min.js.map.\n\n    - inflate.min.js\n    - inflate.min.js.map\n    - [src]\n      - (source files)\n\n`[src]` is zlib.js source code directory.\n\n\n### Pretty Print\n\n`zlib.pretty.js` is not renamed symbol.\n\n\nHow to build\n------------\n\nBuild using Ant and Closure Compiler.\n\n### Requirement\n\n- Ant 1.8+\n- JRE 1.6+\n- Python\n\n### Build\n\nUse \"ant\" command.\n\n```\n$ ant [target]\n```\n\n#### Build target\n\ntarget         | generate file        | implementation\n---------------|----------------------|-------------\ndeps           | deps.js              | (dependency: deps.js)\ndeflate        | deflate.min.js       | ZLIB Deflate\ninflate        | inflate.min.js       | ZLIB Inflate\ninflate_stream | inlate_stream.min.js | ZLIB Inlate (stream)\nzlib           | zlib.min.js          | ZLIB Deflate + Inflate\ngzip           | gzip.min.js          | GZIP Compression\ngunzip         | gunzip.min.js        | GZIP Decompression\nzlib_and_gzip  | zlib_and_gzip.min.js | ZLIB + GZIP\nnode           | node-zlib.js         | ZLIB + GZIP for node.js\nzip            | zip.min.js           | PKZIP Compression\nunzip          | unzip.min.js         | PKZIP Decompression\nall            | *                    | default target\n\n\nIssue\n-----\n\nPreset dictionary is not implemented.\n\n\nLicense\n--------\n\nCopyright &copy; 2012 imaya.\nLicensed under the MIT License.\n",
  "readmeFilename": "README.en.md",
  "bugs": {
    "url": "https://github.com/imaya/zlib.js/issues"
  },
  "_id": "zlibjs@0.2.0",
  "_from": "zlibjs@~0.2.0"
}
