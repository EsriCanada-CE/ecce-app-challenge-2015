{
  "name": "pako",
  "description": "zlib port to javascript - fast, modularized, with browser support",
  "version": "0.1.1",
  "keywords": [
    "zlib",
    "deflate",
    "inflate",
    "gzip"
  ],
  "homepage": "https://github.com/nodeca/pako",
  "contributors": [
    {
      "name": "Andrei Tuputcyn",
      "url": "https://github.com/andr83"
    },
    {
      "name": "Vitaly Puzrin",
      "url": "https://github.com/puzrin"
    }
  ],
  "bugs": {
    "url": "https://github.com/nodeca/pako/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/nodeca/pako/blob/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nodeca/pako.git"
  },
  "main": "./index.js",
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "benchmark": "*",
    "ansi": "*",
    "browserify": "*",
    "uglify-js": "*",
    "jshint": "*",
    "istanbul": "*",
    "ndoc": "*",
    "lodash": "2.4.1",
    "async": "0.2.10",
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.13",
    "grunt-saucelabs": "~5.0.1",
    "grunt-contrib-connect": "~0.7.1"
  },
  "_id": "pako@0.1.1",
  "dist": {
    "shasum": "5053d4d5d90b1681e037b3c60e857d4756d5f25f",
    "tarball": "http://registry.npmjs.org/pako/-/pako-0.1.1.tgz"
  },
  "_from": "pako@0.1.1",
  "_resolved": "https://registry.npmjs.org/pako/-/pako-0.1.1.tgz",
  "scripts": {},
  "_npmVersion": "1.4.3",
  "_npmUser": {
    "name": "vitaly",
    "email": "vitaly@rcdesign.ru"
  },
  "maintainers": [
    {
      "name": "vitaly",
      "email": "vitaly@rcdesign.ru"
    }
  ],
  "directories": {},
  "_shasum": "5053d4d5d90b1681e037b3c60e857d4756d5f25f",
  "readme": "pako - zlib port to javascript, very fast!\n==========================================\n\n[![Build Status](https://travis-ci.org/nodeca/pako.png?branch=master)](https://travis-ci.org/nodeca/pako)\n\n__Why pako is cool:__\n\n- Almost as fast in modern JS engines as C implementation (see benchmarks).\n- Works in browsers, you can browserify any separate component.\n- Both Sync & streamable (for big blobs) interfaces.\n- It's fresh - ports the latest zlib version (now 1.2.8), results are binary equal.\n\nThis project was done to understand how fast JS can be and is it necessary to\ndevelop native C modules for CPU-intensive tasks. Enjoy the result!\n\n__Benchmarks:__\n\n```\nnode v0.10.26, 1mb sample:\n\n   deflate-dankogai x 4.74 ops/sec ±0.68% (15 runs sampled)\n   deflate-gildas x 4.61 ops/sec ±1.73% (15 runs sampled)\n   deflate-imaya x 3.10 ops/sec ±3.73% (11 runs sampled)\n ! deflate-pako x 7.11 ops/sec ±0.26% (21 runs sampled)\n   deflate-pako-untyped x 4.34 ops/sec ±1.35% (14 runs sampled)\n   deflate-zlib x 14.34 ops/sec ±2.90% (68 runs sampled)\n   inflate-dankogai x 31.29 ops/sec ±0.72% (56 runs sampled)\n   inflate-imaya x 30.49 ops/sec ±0.84% (53 runs sampled)\n ! inflate-pako x 70.00 ops/sec ±1.60% (71 runs sampled)\n   inflate-pako-untyped x 17.67 ops/sec ±1.27% (33 runs sampled)\n   inflate-zlib x 70.82 ops/sec ±1.69% (81 runs sampled)\n\nnode v0.11.11, 1mb sample:\n\n   deflate-dankogai x 5.61 ops/sec ±0.30% (17 runs sampled)\n   deflate-gildas x 4.97 ops/sec ±5.68% (16 runs sampled)\n   deflate-imaya x 3.53 ops/sec ±4.19% (12 runs sampled)\n ! deflate-pako x 11.52 ops/sec ±0.23% (32 runs sampled)\n   deflate-pako-untyped x 5.12 ops/sec ±1.44% (17 runs sampled)\n   deflate-zlib x 14.33 ops/sec ±3.34% (63 runs sampled)\n   inflate-dankogai x 42.96 ops/sec ±0.19% (57 runs sampled)\n   inflate-imaya x 85.05 ops/sec ±1.07% (71 runs sampled)\n ! inflate-pako x 97.58 ops/sec ±0.69% (80 runs sampled)\n   inflate-pako-untyped x 18.06 ops/sec ±0.65% (56 runs sampled)\n   inflate-zlib x 60.60 ops/sec ±2.04% (67 runs sampled)\n```\n\nzlib's test is partialy afferted by marshling (that make sense for inflate only).\nYou can change deflate level to 0 in benchmark source, to investigate details.\nFor deflate level 6 results can be considered as correct.\n\n__Install:__\n\nnode.js:\n\n```\nnpm install pako\n```\n\nbrowser:\n\n```\nbower install pako\n```\n\n\nExample & API\n-------------\n\nFull docs - http://nodeca.github.io/pako/\n\n```javascript\nvar pako = require('pako');\n\n// Deflate\n//\nvar input = new Uint8Array();\n//... fill input data here\nvar output = pako.deflate(input);\n\n// Inflate (simple wrapper can throw exception on broken stream)\n//\nvar compressed = new Uint8Array();\n//... fill data to uncompress here\ntry {\n  var result = pako.inflate(compressed);\ncatch (err) {\n  console.log(err);\n}\n\n//\n// Alternate interface for chunking & without exceptions\n//\n\nvar inflator = new pako.Inflate();\n\ninflator.push(chunk1, false);\ninflator.push(chunk2, false);\n...\ninflator.push(chunkN, true); // true -> last chunk\n\nif (inflator.err) {\n  console.log(inflator.msg);\n}\n\nvar output = inflator.result;\n\n```\n\n\nNotes\n-----\n\nPako does not contain some specific zlib functions:\n\n- __deflate__ - writing custom gzip headers and methods `deflateSetDictionary`,\n  `deflateParams`, `deflateSetHeader`, `deflateBound`, `deflatePending`.\n- __inflate__ - getting custom gzip headers and methods `inflateGetDictionary`,\n  `inflateGetHeader`, `inflateSetDictionary`, `inflateSync`, `inflateSyncPoint`,\n  `inflateCopy`, `inflateUndermine`, `inflateMark`.\n\n\nAuthors\n-------\n\n- Andrey Tupitsin [@anrd83](https://github.com/andr83)\n- Vitaly Puzrin [@puzrin](https://github.com/puzrin)\n\nPersonal thanks to Vyacheslav Egorov ([@mraleph](https://github.com/mraleph))\nfor his awesome tutoruals about optimising JS code for v8,\n[IRHydra](http://mrale.ph/irhydra/) tool and his advices.\n\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md"
}
